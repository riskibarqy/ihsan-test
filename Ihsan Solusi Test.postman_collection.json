{
	"info": {
		"_postman_id": "ee7484d8-bfd5-4f68-ac18-13bc1e0c504d",
		"name": "Ihsan Solusi Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24998345"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data');",
									"    ",
									"    const userData = responseData.data;",
									"    pm.expect(userData).to.have.property('id');",
									"    pm.expect(userData).to.have.property('nama');",
									"    pm.expect(userData).to.have.property('nik');",
									"    pm.expect(userData).to.have.property('no_hp');",
									"    pm.expect(userData).to.have.property('no_rekening');",
									"});",
									"",
									"",
									"pm.test(\"Nama is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.an('object');",
									"  pm.expect(responseData.data.nama).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Nama should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"NIK is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.data).to.be.an('object');",
									"    pm.expect(responseData.data.nik).to.match(/^\\d{16}$/);",
									"});",
									"",
									"",
									"pm.test(\"No_hp is in a valid phone number format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.no_hp).to.match(/^\\d{10,12}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/api/users/:id",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomNIK = \"\";\r",
									"for (let i = 0; i < 16; i++) {\r",
									"    randomNIK += Math.floor(Math.random() * 10);\r",
									"}\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomNIK\", randomNIK);\r",
									"console.log(\"random nik: \" + randomNIK);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Data object has the required fields\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.exist;",
									"  pm.expect(responseData.data.nama).to.exist;",
									"  pm.expect(responseData.data.nik).to.exist;",
									"  pm.expect(responseData.data.no_hp).to.exist;",
									"  pm.expect(responseData.data.no_rekening).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Phone number (no_hp) is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.no_hp).to.match(/^\\d{10,12}$/);",
									"});",
									"",
									"",
									"pm.test(\"No_rekening is in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.no_rekening).to.match(/^\\d{10,}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nama\" :\"{{$randomFullName}}\",\r\n    \"nik\": \"{{randomNIK}}\",\r\n    \"no_hp\" :\"{{$randomPhoneNumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/users/daftar",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"daftar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Current Balance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let randomNIK = \"\";\r",
									"for (let i = 0; i < 16; i++) {\r",
									"    randomNIK += Math.floor(Math.random() * 10);\r",
									"}\r",
									"\r",
									"\r",
									"pm.environment.set(\"randomNIK\", randomNIK);\r",
									"console.log(\"random nik: \" + randomNIK);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"  pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response includes an error object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property(\"error\");",
									"});",
									"",
									"",
									"pm.test(\"Error object has remark and code fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error).to.exist;",
									"    pm.expect(responseData.error.remark).to.exist;",
									"    pm.expect(responseData.error.code).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Data field should be null\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.data).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nama\" :\"{{$randomFullName}}\",\r\n    \"nik\": \"{{randomNIK}}\",\r\n    \"no_hp\" :\"{{$randomPhoneNumber}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/users/saldo/:no_rekening",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"users",
								"saldo",
								":no_rekening"
							],
							"variable": [
								{
									"key": "no_rekening",
									"value": "666767704202"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Balance History",
			"item": [
				{
					"name": "Add Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - no_rekening and saldo\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.no_rekening).to.exist;",
									"    pm.expect(responseData.saldo).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"No_rekening is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.no_rekening).to.be.a('string').and.to.have.lengthOf.at.least(1, \"No_rekening should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Saldo is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data.saldo).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"no_rekening\":\"666767704202\",\r\n    \"nominal\":5000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user-balance-histories/tabung",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user-balance-histories",
								"tabung"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.equal(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - data and error\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('data');",
									"    pm.expect(responseData).to.have.property('error');",
									"});",
									"",
									"",
									"pm.test(\"Remark is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error.remark).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Remark should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Code is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.error.code).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.error.code).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Data is either null or a valid object\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.data).to.satisfy((data) => {",
									"    return data === null || typeof data === 'object';",
									"  });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"no_rekening\":\"666514266252\",\r\n    \"nominal\":2322\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/api/user-balance-histories/tarik",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"user-balance-histories",
								"tarik"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health Check",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/livez",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"livez"
					]
				}
			},
			"response": []
		}
	]
}